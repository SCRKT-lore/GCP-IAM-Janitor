# GCP IAM Janitor - Docker Compose for Local Development
# This configuration provides an easy way to run the GCP IAM Janitor application locally with Docker

services:
  gcp-iam-janitor:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        # Choose app version: simple, enhanced, consolidation, advanced
        # Override with: docker compose --profile enhanced up
        APP_VERSION: ${APP_VERSION:-advanced}
    container_name: gcp-iam-janitor
    ports:
      # Map host port 8501 to container port 8501
      - "8501:8501"
    environment:
      # Application settings
      - APP_VERSION=${APP_VERSION:-advanced}
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      
      # GCP Configuration
      # Set your GCP project ID here or in .env file
      - GCP_PROJECT_ID=${GCP_PROJECT_ID:-your-gcp-project-id}
      
      # Google Cloud credentials path inside container
      # This points to the mounted credentials directory
      - GOOGLE_APPLICATION_CREDENTIALS=/gcp/credentials/application_default_credentials.json
      
      # Optional: Logging configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
    
    volumes:
      # Mount Google Cloud credentials (read-only)
      # This assumes you have run: gcloud auth application-default login
      - ~/.config/gcloud:/gcp/credentials:ro
      
      # Optional: Mount source code for development hot-reload
      # Uncomment the next line for development with code changes
      # - .:/app
    
    # Health check configuration
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Restart policy
    restart: unless-stopped
    
    # Add labels for organization
    labels:
      - "project=gcp-iam-janitor"
      - "environment=development"
      - "maintainer=GCP-IAM-Janitor"

# Profile configurations for different app versions
# Usage examples:
#   docker compose up                           # Run advanced version (default)
#   docker compose --profile simple up         # Run simple version
#   docker compose --profile enhanced up       # Run enhanced version
#   docker compose --profile consolidation up  # Run consolidation version

  # Simple version profile
  gcp-iam-janitor-simple:
    profiles: ["simple"]
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_VERSION: simple
    container_name: gcp-iam-janitor-simple
    ports:
      - "8501:8501"
    environment:
      - APP_VERSION=simple
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - GCP_PROJECT_ID=${GCP_PROJECT_ID:-your-gcp-project-id}
      - GOOGLE_APPLICATION_CREDENTIALS=/gcp/credentials/application_default_credentials.json
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
    volumes:
      - ~/.config/gcloud:/gcp/credentials:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    labels:
      - "project=gcp-iam-janitor"
      - "environment=development"
      - "version=simple"

  # Enhanced version profile
  gcp-iam-janitor-enhanced:
    profiles: ["enhanced"]
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_VERSION: enhanced
    container_name: gcp-iam-janitor-enhanced
    ports:
      - "8501:8501"
    environment:
      - APP_VERSION=enhanced
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - GCP_PROJECT_ID=${GCP_PROJECT_ID:-your-gcp-project-id}
      - GOOGLE_APPLICATION_CREDENTIALS=/gcp/credentials/application_default_credentials.json
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
    volumes:
      - ~/.config/gcloud:/gcp/credentials:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    labels:
      - "project=gcp-iam-janitor"
      - "environment=development"
      - "version=enhanced"

  # Consolidation version profile
  gcp-iam-janitor-consolidation:
    profiles: ["consolidation"]
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_VERSION: consolidation
    container_name: gcp-iam-janitor-consolidation
    ports:
      - "8501:8501"
    environment:
      - APP_VERSION=consolidation
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - GCP_PROJECT_ID=${GCP_PROJECT_ID:-your-gcp-project-id}
      - GOOGLE_APPLICATION_CREDENTIALS=/gcp/credentials/application_default_credentials.json
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
    volumes:
      - ~/.config/gcloud:/gcp/credentials:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    labels:
      - "project=gcp-iam-janitor"
      - "environment=development"
      - "version=consolidation"

# Networks (optional - uses default bridge network)
networks:
  default:
    name: gcp-iam-janitor-network
    driver: bridge

# Volumes (optional - for persistent data if needed)
volumes:
  gcp_credentials:
    driver: local
    name: gcp-iam-janitor-credentials