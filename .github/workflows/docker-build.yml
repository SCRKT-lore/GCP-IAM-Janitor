name: Build and Push Docker Images

on:
  # Trigger on push to main branch
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  
  # Trigger on pull requests to main
  pull_request:
    branches:
      - main
      - develop
  
  # Allow manual triggering with app version selection
  workflow_dispatch:
    inputs:
      app_version:
        description: 'App version to build (simple, enhanced, consolidation, advanced, all)'
        required: true
        default: 'all'
        type: choice
        options:
          - simple
          - enhanced
          - consolidation
          - advanced
          - all
      push_images:
        description: 'Push images to registry'
        required: true
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    
    strategy:
      fail-fast: false
      matrix:
        # Build all versions by default, or specific version if manually triggered
        app_version: ${{ 
          github.event.inputs.app_version == 'simple' && fromJson('["simple"]') ||
          github.event.inputs.app_version == 'enhanced' && fromJson('["enhanced"]') ||
          github.event.inputs.app_version == 'consolidation' && fromJson('["consolidation"]') ||
          github.event.inputs.app_version == 'advanced' && fromJson('["advanced"]') ||
          fromJson('["simple", "enhanced", "consolidation", "advanced"]')
        }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        flavor: |
          latest=auto
          suffix=-${{ matrix.app_version }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-,suffix=-${{ matrix.app_version }}
          type=raw,value=latest,enable={{is_default_branch}},suffix=-${{ matrix.app_version }}
    
    - name: Build Docker image (PR - no push)
      if: github.event_name == 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        build-args: |
          APP_VERSION=${{ matrix.app_version }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.app_version }}
        cache-to: type=gha,mode=max,scope=${{ matrix.app_version }}
        push: false
    
    - name: Build and push Docker image
      id: build
      if: github.event_name != 'pull_request' && (github.event.inputs.push_images != 'false')
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        build-args: |
          APP_VERSION=${{ matrix.app_version }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: |
          ${{ steps.meta.outputs.labels }}
          org.opencontainers.image.title=GCP IAM Janitor (${{ matrix.app_version }})
          org.opencontainers.image.description=Comprehensive GCP IAM analysis and management tool - ${{ matrix.app_version }} version
          org.opencontainers.image.vendor=GCP-IAM-Janitor
          app.version=${{ matrix.app_version }}
        cache-from: type=gha,scope=${{ matrix.app_version }}
        cache-to: type=gha,mode=max,scope=${{ matrix.app_version }}
        push: true
        outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=GCP IAM Janitor ${{ matrix.app_version }} version
    
    - name: Generate artifact attestation
      if: github.event_name != 'pull_request' && (github.event.inputs.push_images != 'false')
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true

  # Summary job to provide build status
  build-summary:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
    - name: Build Summary
      run: |
        echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Results" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.build.result }}" == "success" ]; then
          echo "✅ All Docker images built successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Images" >> $GITHUB_STEP_SUMMARY
          echo "Images have been pushed to: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Available versions:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-simple\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-enhanced\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-consolidation\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-advanced\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Start" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run the advanced version" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 8501:8501 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -v ~/.config/gcloud:/gcp/credentials:ro \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e GOOGLE_APPLICATION_CREDENTIALS=/gcp/credentials/application_default_credentials.json \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-advanced" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Docker build failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the build logs for more details." >> $GITHUB_STEP_SUMMARY
        fi

  # Security scanning job
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        app_version: [simple, enhanced, consolidation, advanced]
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.app_version }}'
        format: 'sarif'
        output: 'trivy-results-${{ matrix.app_version }}.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.app_version }}.sarif'
        category: 'trivy-${{ matrix.app_version }}'