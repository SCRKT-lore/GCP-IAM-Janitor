# GCP IAM Janitor - Environment Configuration Example
# Copy this file to .env and update the values according to your environment
# 
# Security Warning: Never commit actual credential files or API keys to version control!
# The .env file is excluded from git by default via .gitignore

# ==============================================================================
# Google Cloud Platform Configuration
# ==============================================================================

# Your GCP Project ID (required)
# This should be the project where you want to analyze IAM policies
# Example: my-gcp-project-123
GCP_PROJECT_ID=your-gcp-project-id-here

# Google Cloud Credentials Path (optional for Docker, required for local development)
# For Docker: credentials are mounted via volume, this is automatically set
# For local development: path to your service account key file or leave empty for ADC
# Example: /path/to/service-account-key.json
# Leave empty to use Application Default Credentials (recommended)
GOOGLE_APPLICATION_CREDENTIALS=

# ==============================================================================
# Application Configuration
# ==============================================================================

# Application Version (simple, enhanced, consolidation, advanced)
# Determines which version of the GCP IAM Janitor to run
# - simple: Basic IAM analysis with essential metrics
# - enhanced: AI-powered insights with advanced analytics
# - consolidation: IAM policy reduction through intelligent grouping
# - advanced: All features including enhanced identity analysis and audit trail integration
APP_VERSION=advanced

# ==============================================================================
# Streamlit Server Configuration
# ==============================================================================

# Server port (default: 8501)
# The port where Streamlit will serve the application
STREAMLIT_SERVER_PORT=8501

# Server address (default: 0.0.0.0 for Docker, 127.0.0.1 for local)
# For Docker deployment, use 0.0.0.0 to accept connections from any address
# For local development, you can use 127.0.0.1 or localhost
STREAMLIT_SERVER_ADDRESS=0.0.0.0

# Server headless mode (true/false)
# Set to true for Docker deployments to prevent browser auto-opening
STREAMLIT_SERVER_HEADLESS=true

# Disable usage statistics collection (true/false)
# Set to false to disable Streamlit's usage statistics collection
STREAMLIT_BROWSER_GATHER_USAGE_STATS=false

# ==============================================================================
# Logging and Development Configuration
# ==============================================================================

# Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
# Controls the verbosity of application logging
# Use DEBUG for development, INFO for production
LOG_LEVEL=INFO

# Python unbuffered output (0/1)
# Ensures Python output is sent straight to terminal without buffering
# Useful for Docker containers to see logs immediately
PYTHONUNBUFFERED=1

# ==============================================================================
# Optional: Advanced Configuration
# ==============================================================================

# Cache TTL in seconds (default: 1800 = 30 minutes)
# How long to cache GCP API responses to improve performance
CACHE_TTL=1800

# Maximum number of projects to analyze simultaneously (default: 10)
# Prevents overwhelming the GCP APIs with too many concurrent requests
MAX_CONCURRENT_PROJECTS=10

# Enable detailed audit logging (true/false)
# Only applicable for advanced version with audit trail integration
ENABLE_AUDIT_LOGGING=false

# ==============================================================================
# Cloud Run / Production Deployment Configuration
# ==============================================================================

# Cloud Run Service Name (for deployment scripts)
CLOUD_RUN_SERVICE_NAME=gcp-iam-janitor

# Cloud Run Region (for deployment scripts)
CLOUD_RUN_REGION=us-central1

# Cloud Run Maximum Instances (for auto-scaling)
CLOUD_RUN_MAX_INSTANCES=10

# Cloud Run Memory Allocation (for resource limits)
CLOUD_RUN_MEMORY=2Gi

# Cloud Run CPU Allocation (for resource limits)
CLOUD_RUN_CPU=2

# Cloud Run Timeout (maximum request timeout in seconds)
CLOUD_RUN_TIMEOUT=3600

# ==============================================================================
# Security Configuration
# ==============================================================================

# Service Account Email (for Cloud Run deployment)
# The service account that the application will run as in production
# This service account needs appropriate IAM permissions to analyze your GCP resources
SERVICE_ACCOUNT_EMAIL=gcp-iam-janitor@your-project.iam.gserviceaccount.com

# Allowed Origins (for CORS if needed)
# Comma-separated list of origins allowed to access the application
# Example: https://your-domain.com,https://another-domain.com
ALLOWED_ORIGINS=

# ==============================================================================
# Example Configurations for Different Deployment Scenarios
# ==============================================================================

# ---- Local Development ----
# APP_VERSION=advanced
# STREAMLIT_SERVER_ADDRESS=127.0.0.1
# STREAMLIT_SERVER_HEADLESS=false
# LOG_LEVEL=DEBUG

# ---- Docker Development ----
# APP_VERSION=advanced
# STREAMLIT_SERVER_ADDRESS=0.0.0.0
# STREAMLIT_SERVER_HEADLESS=true
# LOG_LEVEL=INFO

# ---- Cloud Run Production ----
# APP_VERSION=advanced
# STREAMLIT_SERVER_ADDRESS=0.0.0.0
# STREAMLIT_SERVER_HEADLESS=true
# LOG_LEVEL=INFO
# PYTHONUNBUFFERED=1
# SERVICE_ACCOUNT_EMAIL=gcp-iam-janitor@production-project.iam.gserviceaccount.com

# ==============================================================================
# Required IAM Permissions
# ==============================================================================
# 
# Ensure your service account or user account has these IAM permissions:
# 
# For Project Analysis:
# - resourcemanager.projects.get
# - resourcemanager.projects.list
# - resourcemanager.projects.getIamPolicy
# 
# For Organization Analysis:
# - resourcemanager.organizations.get
# - resourcemanager.organizations.list
# - resourcemanager.organizations.getIamPolicy
# - resourcemanager.folders.list
# - resourcemanager.folders.getIamPolicy
# 
# For Role Analysis:
# - iam.roles.list
# - iam.roles.get
# 
# Recommended Roles:
# - Security Reviewer (roles/iam.securityReviewer)
# - Organization Viewer (roles/resourcemanager.organizationViewer)
# - Project Viewer (roles/viewer) on target projects
# 
# For Advanced Features:
# - Cloud Identity Groups Reader (for group membership resolution)
# - Logging Viewer (roles/logging.viewer) for audit log analysis